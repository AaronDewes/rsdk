#!/usr/bin/env bash

prepare_keyrings() {
	# 1, create output dir
	OUTPUT_DIR="$1"
	mkdir -p "$OUTPUT_DIR"

	# 2. copy keyrings
	cp -r "$SCRIPT_DIR/../../keyrings/debian/apt-trusted-asc/." "$OUTPUT_DIR"
	cp -r "$SCRIPT_DIR/../../keyrings/radxa/keyrings/." "$OUTPUT_DIR"
	cp -r "$SCRIPT_DIR/../../keyrings/ubuntu/keyrings/." "$OUTPUT_DIR"
	cp -r "$SCRIPT_DIR/../../keyrings/vscodium/pub.gpg" "$OUTPUT_DIR"

	# 3. dearmor keyrings
	for i in "$OUTPUT_DIR"/*.asc "$OUTPUT_DIR/pub.gpg"; do
		gpg --dearmor "$i"
		rm "$i"
	done

	echo "APT keyrings are ready."
}

generate_rootfs() {
	local RSDK_TEMP
	RSDK_TEMP="$(mktemp -d "/tmp/rsdk.${PRODUCT}_${SUITE}_${EDITION}.XXXXXXXX")"
	# Need the temp folder to be viewable for apt-key to access
	chmod 0755 "$RSDK_TEMP"
	if [[ $RSDK_OPTION_DEBUG == "true" ]]; then
		echo "rsdk temp dir: $RSDK_TEMP"
	fi

	local JSONNET_ARGS=(
		"--tla-str" "product=$PRODUCT"
		"--tla-str" "suite=$SUITE"
		"--tla-str" "edition=$EDITION"
		"--tla-str" "temp_dir=$RSDK_TEMP"
		"--tla-str" "output_dir=$OUTPUT"
		"--tla-str" "build_date=$(date --iso-8601=s)"
	)
	local BDEBSTRAP_ARGS=()

	if [[ $RSDK_OPTION_DEBUG == "true" ]]; then
		BDEBSTRAP_ARGS+=("--debug")
	fi

	if [[ -n ${RSDK_OPTION_ROOTFS} ]]; then
		JSONNET_ARGS+=("--tla-str" "rootfs=$RSDK_OPTION_ROOTFS")
	fi

	if [[ -n ${RSDK_OPTION_DISTRO_MIRROR} ]]; then
		JSONNET_ARGS+=("--tla-str" "distro_mirror=$RSDK_OPTION_DISTRO_MIRROR")
	fi

	if [[ -n ${RSDK_OPTION_RADXA_MIRROR} ]]; then
		JSONNET_ARGS+=("--tla-str" "radxa_mirror=$RSDK_OPTION_RADXA_MIRROR")
	fi

	if [[ -n ${RSDK_OPTION_REPO_SUFFIX} ]]; then
		JSONNET_ARGS+=("--tla-str" "radxa_repo_suffix=$RSDK_OPTION_REPO_SUFFIX")
	fi

	if [[ -n $RSDK_OPTION_KERNEL_OVERRIDE ]]; then
		JSONNET_ARGS+=("--tla-str" "linux_override=$RSDK_OPTION_KERNEL_OVERRIDE")
	fi

	if [[ -n $RSDK_OPTION_FIRMWARE_OVERRIDE ]]; then
		JSONNET_ARGS+=("--tla-str" "u_boot_override=$RSDK_OPTION_FIRMWARE_OVERRIDE")
	fi

	# Prepare keyrings
	prepare_keyrings "$RSDK_TEMP/keyrings/"

	jsonnet "${JSONNET_ARGS[@]}" "$SCRIPT_DIR/../../templates/rootfs.jsonnet" -o "$RSDK_TEMP/rootfs.json"
	if [[ $RSDK_OPTION_DEBUG == "true" ]]; then
		cat "$RSDK_TEMP/rootfs.json"
	fi
	# Everything in $OUTPUT will be removed, so we cannot generate build-image first
	sudo bdebstrap "${BDEBSTRAP_ARGS[@]}" -c "$RSDK_TEMP/rootfs.json" --name "$OUTPUT" --force

	sudo chown "$UID:${GID:-$UID}" "$OUTPUT"
	for i in "$OUTPUT"/*; do
		if [[ $i != "$OUTPUT/$RSDK_OPTION_ROOTFS" ]] || [[ -f "$OUTPUT/$RSDK_OPTION_ROOTFS" ]]; then
			sudo chown -R "$UID:${GID:-$UID}" "$i"
		fi
	done

	rm -rf "$RSDK_TEMP"
}

generate_image() {
	if [[ ! -e "$OUTPUT/build-image" ]]; then
		local JSONNET_ARGS=(
			"-S"
			"--tla-str" "product=$PRODUCT"
		)

		if [[ -n ${RSDK_OPTION_EFI} ]]; then
			JSONNET_ARGS+=("--tla-code" "efi=$RSDK_OPTION_EFI")
		fi

		if [[ -n ${RSDK_OPTION_ROOTFS} ]]; then
			JSONNET_ARGS+=("--tla-str" "rootfs=$RSDK_OPTION_ROOTFS")
		fi

		if [[ -n ${RSDK_OPTION_IMAGE_NAME} ]]; then
			JSONNET_ARGS+=("--tla-str" "output=$RSDK_OPTION_IMAGE_NAME")
		fi

		jsonnet "${JSONNET_ARGS[@]}" "$SCRIPT_DIR/../../templates/image.jsonnet" -o "$OUTPUT/build-image"
		chmod +x "$OUTPUT/build-image"
	fi

	pushd "$OUTPUT"
	if [[ -f $RSDK_OPTION_ROOTFS ]]; then
		./build-image
	elif [[ -d $RSDK_OPTION_ROOTFS ]]; then
		sudo ./build-image
		sudo chown "$UID:${GID:-$UID}" "$RSDK_OPTION_IMAGE_NAME"
	else
		echo "Unrecognized rootfs type for '$RSDK_OPTION_ROOTFS'." >&2
		popd
		exit 1
	fi
	popd
}

main() {
	local SCRIPT_DIR
	SCRIPT_DIR="$(dirname "$(realpath "$0")")"
	# shellcheck source=bin/lib/utils.sh
	source "$SCRIPT_DIR/../lib/utils.sh"
	# shellcheck source=bin/lib/rsdk_configs.sh
	source "$SCRIPT_DIR/../lib/rsdk_configs.sh"

	local TEMP
	if ! TEMP="$(getopt -o "hdTm:M:i:k:f:" -l "no-efi,help,debug,test-repo,mirror:,image-name,no-cache,override-kernel:,override-firmware:" -n "$0" -- "$@")"; then
		return
	fi
	eval set -- "$TEMP"

	local RSDK_OPTION_EFI="${RSDK_OPTION_EFI:-true}"
	local RSDK_OPTION_DEBUG="${RSDK_OPTION_DEBUG:-false}"
	local RSDK_OPTION_REPO_SUFFIX="${RSDK_OPTION_REPO_SUFFIX:-}"
	local RSDK_OPTION_DISTRO_MIRROR="${RSDK_OPTION_DISTRO_MIRROR:-}"
	local RSDK_OPTION_RADXA_MIRROR="${RSDK_OPTION_RADXA_MIRROR:-}"
	local RSDK_OPTION_ROOTFS="${RSDK_OPTION_ROOTFS:-rootfs.tar}"
	local RSDK_OPTION_IMAGE_NAME="${RSDK_OPTION_IMAGE_NAME:-$RSDK_DEFAULT_IMAGE_NAME}"
	local RSDK_OPTION_CACHE="${RSDK_OPTION_CACHE:-true}"
	local RSDK_OPTION_KERNEL_OVERRIDE="${RSDK_OPTION_KERNEL_OVERRIDE:-}"
	local RSDK_OPTION_FIRMWARE_OVERRIDE="${RSDK_OPTION_FIRMWARE_OVERRIDE:-}"

	while true; do
		TEMP="$1"
		shift
		case "$TEMP" in
		--no-cache)
			RSDK_OPTION_CACHE="false"
			;;
		--no-efi)
			RSDK_OPTION_EFI="false"
			;;
		-d | --debug)
			RSDK_OPTION_DEBUG="true"
			RSDK_OPTION_ROOTFS="rootfs"
			;;
		-T | --test-repo)
			RSDK_OPTION_REPO_SUFFIX="-test"
			;;
		-m | --mirror)
			RSDK_OPTION_DISTRO_MIRROR="$1"
			shift
			;;
		-M)
			RSDK_OPTION_RADXA_MIRROR="$1"
			shift
			;;
		-i | --image-name)
			RSDK_OPTION_IMAGE_NAME="$1"
			shift
			;;
		-h | --help)
			rsdk help build
			return
			;;
		-k | --override-kernel)
			RSDK_OPTION_KERNEL_OVERRIDE="$1"
			shift
			;;
		-f | --override-firmware)
			RSDK_OPTION_FIRMWARE_OVERRIDE="$1"
			shift
			;;
		--)
			break
			;;
		*)
			error $EXIT_UNKNOWN_OPTION "$TEMP"
			;;
		esac
	done

	local PRODUCT="${1}"
	local SUITE="${2:-$(jq -r --arg product "$PRODUCT" '.[] | select(.product == $product).supported_suite[0]' "$SCRIPT_DIR/../../configs/products.json")}"
	local EDITION="${3:-$(jq -r --arg product "$PRODUCT" '.[] | select(.product == $product).supported_edition[0]' "$SCRIPT_DIR/../../configs/products.json")}"
	local OUTPUT="$PWD/out/${PRODUCT}_${SUITE}_${EDITION}"
	mkdir -p "$OUTPUT"

	if [[ $RSDK_OPTION_CACHE == "false" ]] || ([[ -f "$OUTPUT/$RSDK_OPTION_ROOTFS" ]] && (($(du -b "$OUTPUT/$RSDK_OPTION_ROOTFS" | cut -f 1) == 0))); then
		sudo rm -rf "$OUTPUT/$RSDK_OPTION_ROOTFS"
	fi

	if [[ ! -e "$OUTPUT/$RSDK_OPTION_ROOTFS" ]]; then
		generate_rootfs
	fi

	generate_image
}

main "$@"
