msgid ""
msgstr ""
"Project-Id-Version: rsdk\n"
"POT-Creation-Date: 2024-04-19T07:46:48Z\n"
"PO-Revision-Date: \n"
"Last-Translator: \n"
"Language-Team: Language zh-CN\n"
"Language: zh-CN\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: docs/SUMMARY.md:1
msgid "Summary"
msgstr "概述"

#: docs/SUMMARY.md:3
msgid "Introduction"
msgstr "介绍"

#: docs/SUMMARY.md:5
msgid "Tutorials"
msgstr "教程"

#: docs/SUMMARY.md:7
msgid "Installation"
msgstr "安装"

#: docs/SUMMARY.md:8
msgid "With devcontainer"
msgstr "使用开发容器"

#: docs/SUMMARY.md:9
msgid "Using released Debian package"
msgstr "使用发布的Debian包"

#: docs/SUMMARY.md:10
msgid "Native installation"
msgstr "本地安装"

#: docs/SUMMARY.md:11 docs/tutorials/usage.md:1
msgid "Basic usage"
msgstr "基本用法"

#: docs/SUMMARY.md:12 docs/tutorials/migration.md:1
msgid "Migrating from old toolchain"
msgstr "从旧工具链迁移"

#: docs/SUMMARY.md:14
msgid "Command References"
msgstr "命令参考"

#: docs/SUMMARY.md:16 docs/cmd/rsdk.md:1
msgid "rsdk"
msgstr "rsdk"

#: docs/SUMMARY.md:17
msgid "rsdk-shell"
msgstr "rsdk-shell"

#: docs/SUMMARY.md:18
msgid "rsdk-build"
msgstr "rsdk-build"

#: docs/intro.md:1
msgid "Why another system builder?"
msgstr "为什么要迁移到另一个系统构建器?"

#: docs/intro.md:3
msgid ""
"`rsdk` is yet another evolution of Radxa's system builder. The primary goal "
"is to move away from [`debos`](https://github.com/go-debos/debos) for "
"following reasons:"
msgstr ""
"`rsdk` 是 Radxa 系统构建器的又一次进化。主要目标是为了摆脱 [`debos`](https://"
"github.com/go-debos/debos)，原因如下："

#: docs/intro.md:6
msgid ""
"(Previously) [Lack of ARM64 support](https://github.com/go-debos/debos/"
"issues/363)."
msgstr ""
"（以前）[缺乏 ARM64 支持](https://github.com/go-debos/debos/issues/363)。"

#: docs/intro.md:7
msgid ""
"We use pagefile to workaround dkms build failure, which [requires KVM to be "
"available](https://github.com/radxa-repo/rbuild/"
"issues/16#issuecomment-1534176754)."
msgstr ""
"我们使用 pagefile 来解决 dkms 编译失败的问题，这 [需要 KVM 可用](https://"
"github.com/radxa-repo/rbuild/issues/16#issuecomment-1534176754)."

#: docs/intro.md:8
msgid "Go templates leave much to be desired."
msgstr "Go 模板有待改进。"

#: docs/intro.md:9
msgid ""
"[Provided actions](https://pkg.go.dev/github.com/go-debos/debos/actions) are "
"becoming limiting to achieve our desired result."
msgstr ""
"[提供的 actions ](https://pkg.go.dev/github.com/go-debos/debos/actions)正在成"
"为限制我们实现预期结果的因素。"

#: docs/intro.md:11
msgid ""
"Beyond those, our system has grown into 100+ repositories, interconnected by "
"various CI/CD workflows. From an operational standpoint we also need a tool "
"to centrally manage them, with the added bonus that customers can use the "
"very same tool to reproduce our setup for their own use."
msgstr ""
"除此之外，我们的系统已经发展到了 100 多个存储库，并通过各种 CI/CD 工作流相互"
"连接。从操作的角度来看，我们还需要一个工具来集中管理它们，同时客户还可以使用"
"同样的工具来复制我们的设置，供他们自己使用。"

#: docs/intro.md:15
msgid ""
"Finally, we want to have a short answer to the commonly asked question "
"\"where can I download the SDK for X\". So far, our answer has always been a "
"brief explanation of the system design, because of its complexity. We want "
"to have something that matches customer's expectation more closely, where "
"there is only a single entry to all related Radxa source code."
msgstr ""
"最后，我们想简短地回答一个常见问题“我在哪里可以下载 X 的 SDK”。到目前为止，由"
"于系统设计的复杂性，我们的回答一直是对系统设计的简要说明。我们想做一个更符合"
"客户期望的系统，其中所有相关的 Radxa 源代码只有一个入口。"

#: docs/intro.md:20
msgid "Thus, `rsdk` is born."
msgstr "因此，`rsdk` 诞生了。"

#: docs/install/devcontainer.md:1
msgid "Running `rsdk` with devcontainer"
msgstr "使用 devcontainer 运行 `rsdk`"

#: docs/install/devcontainer.md:8
msgid "Please first follow Visual Studio Code's documentation to:"
msgstr "请首先按照 Visual Studio Code 的文档进行操作："

#: docs/install/devcontainer.md:10
msgid ""
"[Install Visual Studio Code](https://code.visualstudio.com/docs/setup/setup-"
"overview)"
msgstr ""
"[安装 Visual Studio Code](https://code.visualstudio.com/docs/setup/setup-"
"overview)"

#: docs/install/devcontainer.md:11
msgid ""
"[Setup devcontainer](https://code.visualstudio.com/docs/devcontainers/"
"containers)"
msgstr ""
"[设置 devcontainer](https://code.visualstudio.com/docs/devcontainers/"
"containers)"

#: docs/install/devcontainer.md:13
msgid "Then clone the project with `git`:"
msgstr "然后使用 `git` 克隆该项目："

#: docs/install/devcontainer.md:19
msgid ""
"Open the project in Visual Studio Code. A notification will pop up on the "
"corner asking if you want to reopen in devcontainer. Click `yes` and wait "
"for the container to be set up."
msgstr ""
"在 Visual Studio Code 中打开项目。项目的右下角上会弹出一个通知，询问你是否要"
"在 devcontainer 中重新打开。点击`是`，然后等待容器设置完成。"

#: docs/install/devcontainer.md:23
msgid "Common issues"
msgstr "常见问题"

#: docs/install/devcontainer.md:25
msgid ""
"devcontainer setup paused with `You might be rate limited by GitHub.` message"
msgstr "devcontainer 设置暂停，出现`您可能受到 GitHub 的速率限制.`消息"

#: docs/install/devcontainer.md:27
msgid ""
"You might be rate limited by GitHub. Please follow the instruction listed in "
"the output."
msgstr "您可能受到 GitHub 的速率限制。请遵循输出中列出的说明。"

#: docs/install/devcontainer.md:29
msgid "Failed to launch devcontainer."
msgstr "devcontainer 启动失败。"

#: docs/install/devcontainer.md:31
msgid ""
"Please edit `.devcintainer/devcontainer.json`, and adjust `runArgs` property."
msgstr "请编辑 `.devcintainer/devcontainer.json`，并调整 `runArgs` 属性。"

#: docs/install/deb.md:1
msgid "Running `rsdk` using released Debian package"
msgstr "使用已发布的 Debian 软件包运行 `rsdk`"

#: docs/install/deb.md:3
msgid "To be released."
msgstr "待发布"

#: docs/install/native.md:1
msgid "Running `rsdk` natively"
msgstr "本地运行 `rsdk`"

#: docs/install/native.md:11
msgid ""
"To run `rsdk` natively, you will ideally need an Ubuntu system, as it is the "
"base system used in Dev Container."
msgstr ""
"要本地运行 `rsdk`，您最好使用 Ubuntu 系统，因为 devcontainer 基于此系统。"

#: docs/install/native.md:13
msgid ""
"Please first install [`devenv`](https://devenv.sh/getting-started/#2-install-"
"cachix) on your system."
msgstr ""
"请首先在您的系统上安装 [`devenv`](https://devenv.sh/getting-started/#2-"
"install-cachix) 。"

#: docs/install/native.md:15
msgid ""
"Optionally you can setup [`direnv`](https://devenv.sh/automatic-shell-"
"activation/), then run `direnv allow` within the project folder to enable it."
msgstr ""
"可选择安装 [`direnv`](https://devenv.sh/automatic-shell-activation/)，然后在"
"项目文件夹中运行 `direnv allow` 来启用它。"

#: docs/install/native.md:17
msgid ""
"You can then run `devenv shell` to enter the development shell. This shell "
"will manipulate your PATH to have the development dependency available."
msgstr ""
"然后运行 `devenv shell` 进入开发 shell。这个 shell 将对您的 PATH 变量进行操"
"作，使开发依赖可用。"

#: docs/install/native.md:19
msgid ""
"If you have `direnv` setup, you don't have to run the above command when you "
"enter the project directory to use the SDK. However, the `direnv` shell "
"lacks `starship` integration as well as `rsdk` auto completion, as it only "
"saves the environmental variables."
msgstr ""
"如果安装了 `direnv`，就不必在进入项目目录使用 SDK 时运行上述命令。不过，"
"`direnv` shell 缺少 `starship` 集成和 `rsdk` 自动补全，因为它只保存环境变量。"

#: docs/install/native.md:21
msgid ""
"There are some additional system configurations and packages that are "
"currently not managed by `devenv`. They are mostly covered by "
"`install_native_dependency` function in `rsdk-setup`."
msgstr ""
"有一些额外的系统配置和软件包 `devenv` 目前无法管理。它们主要由 `rsdk-setup` "
"中的 `install_native_dependency` 函数负责。"

#: docs/tutorials/usage.md:3
msgid "`rsdk` comes with `bash-completion` to assist its CLI usage."
msgstr "`rsdk` 自带 `bash-completion`，可帮助用户使用 CLI。"

#: docs/tutorials/usage.md:5
msgid ""
"After typing `rsdk` into your terminal, if there is no subcommand suggestion "
"after you press Tab key twice, you should run `rsdk shell` to enter the "
"development environment."
msgstr ""
"在终端中输入 `rsdk` 后，如果没有子命令建议，按两次 Tab 键后，应运行 `rsdk "
"shell` 进入开发环境。"

#: docs/tutorials/usage.md:7
msgid ""
"From there, you can use autocompletion to query the supported command list."
msgstr "进入开发环境之后，您可以使用自动补全功能查询支持的命令列表。"

#: docs/tutorials/usage.md:9
msgid "Running a command with `--help` argument will display its help text."
msgstr "伴随 `--help` 参数运行命令时，将显示其帮助文本。"

#: docs/tutorials/usage.md:11
msgid "Use TUI to run guided tasks"
msgstr "使用 TUI 运行向导"

#: docs/tutorials/usage.md:13 docs/cmd/rsdk.md:3
msgid "`rsdk` command is the common CLI entry point."
msgstr "`rsdk` 命令是常用的 CLI 入口。"

#: docs/tutorials/usage.md:15
msgid "When it is run without any argument, `rsdk-tui` will be run instead."
msgstr "在不带任何参数的情况下运行时，将运行 `rsdk-tui`。"

#: docs/tutorials/usage.md:17
msgid "Start TUI Wizard by running `rsdk` in the terminal."
msgstr "从终端执行 `rsdk` 来进入 TUI 向导模式。"

#: docs/tutorials/usage.md:19
msgid ""
"Select the task you want to run.  \n"
"You can use arrow key to navigate, use Enter key to select, and use Escape "
"key to leave current window.  \n"
"In this example, we will choose `Build system image`:"
msgstr ""
"选择要运行的任务。  \n您可以使用方向键导航，使用回车键进行选择，"
"使用 Escape 键离开当前窗口。  \n在这个示例中，我们将选择 `Build system image`："

#: docs/tutorials/usage.md:36
msgid ""
"Select the product you want to build.  \n"
"You can use the space bar to select the product, and the chosen product will "
"have asterisk symbol placed in the parentheses.  \n"
"**Enter key does not select the product when used alone!**  \n"
"In this example, we will choose `rock-5b-6_1`:"
msgstr ""
"选择想要构建的产品。  \n您可以使用空格键选择产品，选择的产品将在括号出现星号。  \n"
"**只使用回车键不会选择产品！**  \n在本例中，我们将选择 `rock-5b-6_1`："

#: docs/tutorials/usage.md:54
msgid ""
"Select `Yes` to start the build process.  \n"
"`rsdk-tui` will then run the associated CLI commands to complete the task:"
msgstr ""
"选择 `Yes`，启动构建程序。  \n然后 `rsdk-tui` 将运行相关的 CLI 命令来完成任务："

#: docs/tutorials/usage.md:60
msgid "'rock-5b-6_1'"
msgstr "'rock-5b-6_1'"

#: docs/tutorials/migration.md:3
msgid "`rbuild`"
msgstr "`rbuild`"

#: docs/tutorials/migration.md:5
msgid ""
"`rsdk build` is the `rbuild` replacement. It uses the same argument "
"ordering, and support similar input values."
msgstr ""
"`rsdk build` 是 `rbuild` 的替代。它使用相同的参数排序，并支持类似的输入值。"

#: docs/tutorials/migration.md:8
msgid ""
"When no suite or edition is supplied, `rsdk build` will use the value "
"defined in `src/share/rsdk/configs/products.json` instead of `bullseye` "
"`cli`."
msgstr ""
"如果没有提供套件或版本参数，`rsdk build` 将使用 `src/share/rsdk/configs/"
"products.json` 中定义的值，而不是 `bullseye` 和 `cli`。"

#: docs/tutorials/migration.md:10
msgid ""
"Not all `rbuild` options are supported by `rsdk build`. Please check the "
"command help for more details."
msgstr ""
"`rsdk build` 并不支持所有 `rbuild` 选项。请查看 help 命令以了解更多详情。"

#: docs/tutorials/migration.md:13
msgid ""
"`.rbuild-config` file is now replaced by `devenv.local.nix`, and option "
"names are adjusted. You can check `devenv.local.nix.example` for syntax."
msgstr ""
"`.rbuild-config` 文件现在由 `devenv.local.nix` 取代，选项名称也进行了调整。您"
"可以查看 `devenv.local.nix.example`，了解语法。"

#: docs/tutorials/migration.md:16
msgid "`rbuild json`"
msgstr "`rbuild json`"

#: docs/tutorials/migration.md:18
msgid ""
"This subcommand is replaced by configuration files under `src/share/rsdk/"
"configs`."
msgstr "该子命令被 `src/share/rsdk/configs` 下的配置文件取代。"

#: docs/tutorials/migration.md:20
msgid "`rbuild shrink-image`"
msgstr "`rbuild shrink-image`"

#: docs/tutorials/migration.md:22
msgid ""
"This subcommand is no longer needed, as now image shrinking is no longer a "
"root operation, and comes standard."
msgstr "不再需要这个子命令，因为现在图像缩小不再是选项，而是标准操作。"

#: docs/tutorials/migration.md:24
msgid "`rbuild write-image`"
msgstr "`rbuild write-image`"

#: docs/tutorials/migration.md:26
msgid ""
"`rsdk write-image` is the `rbuild write-image` replacement. It uses the same "
"argument ordering."
msgstr ""
"`rsdk write-image` 是 `rbuild write-image` 的替代。它使用相同的参数顺序。"

#: docs/cmd/rsdk.md:5
msgid "When it was run without any argument, it will run `rsdk-tui` instead."
msgstr "在不带任何参数的情况下运行时，将运行 `rsdk-tui`。"

#: docs/cmd/rsdk-shell.md:1
msgid "`rsdk-shell`"
msgstr "`rsdk-shell`"

#: docs/cmd/rsdk-shell.md:3
msgid ""
"It is recommended to run `rsdk shell` first to set up the work environment "
"before running other commands.  \n"
"However, most commands should run without issue.  \n"
"Some enhancements (for example, bash completion and shell prompt) may not be "
"available outside of `rsdk shell` by default."
msgstr ""
"建议先运行 `rsdk shell` 设置工作环境，然后再运行其他命令。  \n"
"不过，大多数命令都能顺利运行。  \n在 `rsdk shell` 之外，"
"某些增强功能（例如，bash 补全和 shell 提示）在默认情况下可能不可用。"

#: docs/cmd/rsdk-build.md:3
msgid "Build RadxaOS image"
msgstr "构建 RadxaOS 镜像"

#: docs/cmd/rsdk-build.md:5
msgid ""
"When no suite or edition options is supplied, `rsdk-build` will use the "
"product-specific default values, which are defined in `src/share/rsdk/"
"configs/products.json` as the first element of the respective array.  \n"
"Using ROCK 3C as an example, if you want to build a CLI image for RadxaOS "
"Bullseye, you can run the following command:"
msgstr ""
"当没有提供套件或版本参数时，`rsdk-build` 将使用特定产品的默认值，这些默认值定义在"
" `src/share/rsdk/configs/products.json` 中相应数组的第一个元素。  \n"
"以 ROCK 3C 为例，如果要为 RadxaOS Bullseye 构建 CLI 映像，可以运行以下命令："

#: docs/cmd/rsdk-build.md:12
msgid "RadxaOS output path"
msgstr "RadxaOS 镜像输出路径"

#: docs/cmd/rsdk-build.md:14
msgid ""
"you can find the generated RadxaOS image as `out/${product}_${suite}"
"_${edition}/output.img`."
msgstr ""
"您可以在 `out/${product}_${suite}_${edition}/output.img` 找到生成的 RadxaOS 镜像"
