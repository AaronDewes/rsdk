#!/usr/bin/env bash

update_repo() {
	local TARGET="${1}"
	local OUTPUT="$PWD/out/infra/$TARGET"

	if [[ $RSDK_OPTION_DRY_RUN == "false" ]] && ! gh auth status &>/dev/null; then
		echo "This operation requires GitHub authentication:"
		if ! gh auth login; then
			error "$EXIT_AUTHENTICATION_FAILED" "github"
		fi
	fi

	if [[ $RSDK_OPTION_DRY_RUN == "true" ]]; then
		echo "Dry run. Will only update local repo."
		mkdir -p "$OUTPUT"
		pushd "$OUTPUT"
		git init
		popd
	elif [[ -e "$OUTPUT/.git" ]] && (cd "$OUTPUT" && [[ -n $(git remote) ]]); then
		echo "Found existing repository. Updating..."
		pushd "$OUTPUT"
		git fetch --all
		git pull
		popd
	else
		rm -rf "$OUTPUT"
		mkdir -p "$OUTPUT/.."
		echo "Trying to clone existing repository first..."
		if ! gh repo clone "$RSDK_BUILD_ORG/$TARGET" "$OUTPUT"; then
			echo "Target repository does not exist. New repository will be created."
			pushd "$OUTPUT/.."
			gh repo create "$RSDK_BUILD_ORG/$TARGET" --clone --public
			popd
		fi
	fi

	echo "Remove existing content..."
	find "$OUTPUT" -mindepth 1 -maxdepth 1 ! -name .git -exec rm -rf {} +

	echo "Prepare folder structure..."
	pushd "$RSDK_GIT_REPO_TEMPLATE"
	find . -mindepth 1 -type d -exec mkdir -p "$OUTPUT/{}" \;
	popd

	echo "Populate content..."
	local JSONNET_ARGS=(
		"-S"
		"--tla-str" "target=$TARGET"
		"--tla-str" "build_org=$RSDK_BUILD_ORG"
		"--multi" "$OUTPUT"
	)
	jsonnet "${JSONNET_ARGS[@]}" "$RSDK_GIT_REPO_TEMPLATE/template.jsonnet"

	local RSDK_REV
	RSDK_REV="$(git rev-parse --short "HEAD^{commit}")$(! git diff --quiet && echo .dirty)" || true

	pushd "$OUTPUT"
	if [[ -n "$(git status --porcelain)" ]]; then
		git config --local user.name "github-actions[bot]"
		git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
		git add .
		git commit -m "chore: templates generated by RadxaOS-SDK/rsdk@$RSDK_REV"
	fi

	if [[ $RSDK_OPTION_DRY_RUN == "false" ]]; then
		git push --set-upstream origin main
		gh repo edit --description "$(repo_desc "$TARGET")"
	fi
	popd
}

main() {
	local SCRIPT_DIR BASE_NAME
	SCRIPT_DIR="$(dirname "$(realpath "$0")")"
	# shellcheck source=src/lib/rsdk/utils.sh
	source "$SCRIPT_DIR/../../lib/rsdk/utils.sh"
	BASE_NAME="$(basename "$0")"

	local TEMP
	if ! TEMP="$(getopt -o "hd" -l "help,dry-run" -n "$0" -- "$@")"; then
		return
	fi
	eval set -- "$TEMP"

	export RSDK_OPTION_DRY_RUN="${RSDK_OPTION_DRY_RUN:-false}"
	export RSDK_BUILD_ORG="${RSDK_BUILD_ORG:-$("$SCRIPT_DIR/../../bin/rsdk" config infra.organizations.product)}"
	export RSDK_GIT_REPO_TYPE="${RSDK_GIT_REPO_TYPE:-}"
	export RSDK_GIT_REPO_ARRAY=("${RSDK_GIT_REPO_ARRAY[@]}")
	export RSDK_GIT_REPO_TEMPLATE="${RSDK_GIT_REPO_TEMPLATE:-}"

	case "$BASE_NAME" in
	"rsdk-infra-update")
		echo "'$BASE_NAME' cannot be run directly." >&2
		echo "Please run one of its symbolic links instead." >&2
		return 1
		;;
	"rsdk-infra-product-update")
		RSDK_GIT_REPO_TYPE="product"
		mapfile -t RSDK_GIT_REPO_ARRAY < <(jq -r '.[].product' "$SCRIPT_DIR/../../share/rsdk/configs/products.json")
		RSDK_GIT_REPO_TEMPLATE="$SCRIPT_DIR/../../share/rsdk/infra-product"
		repo_desc() {
			jq -r --arg target "$1" '.[] | select(.product == $target).product_full_name' "$SCRIPT_DIR/../../share/rsdk/configs/products.json"
		}
		;;
	*)
		echo "Unsupported command '$BASE_NAME'." >&2
		return 1
		;;
	esac

	while true; do
		TEMP="$1"
		shift
		case "$TEMP" in
		-d | --dry-run)
			RSDK_OPTION_DRY_RUN="true"
			;;
		-h | --help)
			rsdk help "${BASE_NAME#rsdk-}"
			return
			;;
		--)
			break
			;;
		*)
			error "$EXIT_UNKNOWN_OPTION" "$TEMP"
			;;
		esac
	done

	if (($# == 0)); then
		read -rp "No ${RSDK_GIT_REPO_TYPE} supplied. Do you want to update ALL supported ${RSDK_GIT_REPO_TYPE}s? [y/N] "
		if [[ ${REPLY/Y/y} == "y" ]]; then
			set -- "${RSDK_GIT_REPO_ARRAY[@]}"
		else
			echo "Operation cancelled."
			return
		fi
	fi

	while (($# != 0)); do
		update_repo "$1"
		shift
	done
}

main "$@"
