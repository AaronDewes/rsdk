_rsdk_build_completions() {
	# shellcheck source=src/lib/rsdk/stdlib.sh
	source "$(dirname "$(command -v "${COMP_WORDS[0]}")")/../lib/rsdk/stdlib.sh"

	local suggestions=(
		"--no-cache"
		"--no-efi"
		"-d"
		"--debug"
		"-T"
		"--test-repo"
		"-m"
		"--mirror"
		"-M"
		"-i"
		"--image-name"
		"-h"
		"--help"
		"-k"
		"--override-kernel"
		"-f"
		"--override-firmware"
		"-p"
		"--override-product"
		"--no-vendor-packages"
		"--debs"
		"--sdboot"
	)

	local products=() product_provided="false"
	mapfile -t products < <(jq -er '.[].product' "$(dirname "$(command -v "${COMP_WORDS[0]}")")/../share/rsdk/configs/products.json") && array_remove "products" ""

	for i in "${products[@]}"; do
		# We exclude the last word from the array, as the last word is what user
		# is currently typing. We should only stop suggesting products when user
		# has decided on a product, not when they are still typing.
		if in_array "$i" "${COMP_WORDS[@]:0:$((${#COMP_WORDS[@]} - 1))}"; then
			product_provided="true"
			break
		fi
	done

	if [[ $product_provided == "false" ]]; then
		suggestions+=("${products[@]}")
	fi

	local i
	for i in "${COMP_WORDS[@]}"; do
		array_remove "suggestions" "$i"
	done

	mapfile -t COMPREPLY < <(compgen -W "${suggestions[*]}" -- "${COMP_WORDS[COMP_CWORD]}") && array_remove "COMPREPLY" ""
}

_rsdk_chroot_completions() {
	# shellcheck source=src/lib/rsdk/stdlib.sh
	source "$(dirname "$(command -v "${COMP_WORDS[0]}")")/../lib/rsdk/stdlib.sh"

	case "$COMP_CWORD" in
	2)
		local i suggestions=()
		for i in out/*/output.img \
			"${COMP_WORDS[COMP_CWORD]%/}"/out/*/output.img \
			"${COMP_WORDS[COMP_CWORD]%/}"/*/output.img \
			"${COMP_WORDS[COMP_CWORD]%/}"/output.img; do
			if [[ -f $i ]]; then
				suggestions+=("$i")
			fi
		done
		for i in /dev/disk/by-path/*usb*; do
			if [[ $i == *-part* ]]; then
				continue
			fi
			i="$(realpath "$i")"
			if [[ -b $i ]] && grep -q "$(basename "$i")" /proc/partitions; then
				suggestions+=("$i")
			fi
		done
		mapfile -t COMPREPLY < <(compgen -W "${suggestions[*]}" -- "${COMP_WORDS[COMP_CWORD]}") && array_remove "COMPREPLY" ""
		;;
	esac
}

_rsdk_config_completions() {
	# shellcheck source=src/lib/rsdk/stdlib.sh
	source "$(dirname "$(command -v "${COMP_WORDS[0]}")")/../lib/rsdk/stdlib.sh"

	case "$COMP_CWORD" in
	2)
		local current_level="${COMP_WORDS[COMP_CWORD]%.*}" suggestions=()
		if [[ $current_level == "${COMP_WORDS[COMP_CWORD]}" ]]; then
			current_level=""
		fi
		mapfile -t suggestions < <(jq -er --arg field "$current_level" 'getpath($field / ".") | to_entries[].key | "\($field).\(.)" | ltrimstr(".")' \
			"$(dirname "$(command -v "${COMP_WORDS[0]}")")/../share/rsdk/configs/rsdk.json") && array_remove "suggestions" ""
		mapfile -t COMPREPLY < <(compgen -W "${suggestions[*]}" -- "${COMP_WORDS[COMP_CWORD]}") && array_remove "COMPREPLY" ""
		;;
	esac
}

_rsdk_install_completions() {
	_rsdk_chroot_completions "$@"
}

_rsdk_infra-product-build_completions() {
	# shellcheck source=src/lib/rsdk/stdlib.sh
	source "$(dirname "$(command -v "${COMP_WORDS[0]}")")/../lib/rsdk/stdlib.sh"

	local suggestions=(
		"-p"
		"--production"
		"-t"
		"--test"
		"-h"
		"--help"
	)

	local products=()
	mapfile -t products < <(jq -er '.[].product' "$(dirname "$(command -v "${COMP_WORDS[0]}")")/../share/rsdk/configs/products.json") && array_remove "products" ""
	# Trim empty elements
	array_remove "products" ""
	suggestions+=("${products[@]}")

	local i
	for i in "${COMP_WORDS[@]}"; do
		array_remove "suggestions" "$i"
	done

	mapfile -t COMPREPLY < <(compgen -W "${suggestions[*]}" -- "${COMP_WORDS[COMP_CWORD]}") && array_remove "COMPREPLY" ""
}

_rsdk_infra-repo-build_completions() {
	# shellcheck source=src/lib/rsdk/stdlib.sh
	source "$(dirname "$(command -v "${COMP_WORDS[0]}")")/../lib/rsdk/stdlib.sh"

	local suggestions=(
		"-p"
		"--production"
		"-t"
		"--test"
		"-h"
		"--help"
		"-P"
		"--prefix"
		"-s"
		"--suffix"
	)

	local suites=()
	mapfile -t suites < <(jq -er '.[].supported_suites[]' "$(dirname "$(command -v "${COMP_WORDS[0]}")")/../share/rsdk/configs/distributions.json") && array_remove "suites" ""
	# Trim empty elements
	array_remove "suites" ""
	suggestions+=("${suites[@]}")

	local i
	for i in "${COMP_WORDS[@]}"; do
		array_remove "suggestions" "$i"
	done

	mapfile -t COMPREPLY < <(compgen -W "${suggestions[*]}" -- "${COMP_WORDS[COMP_CWORD]}") && array_remove "COMPREPLY" ""
}

_rsdk_infra-package-update_completions() {
	# shellcheck source=src/lib/rsdk/stdlib.sh
	source "$(dirname "$(command -v "${COMP_WORDS[0]}")")/../lib/rsdk/stdlib.sh"

	local suggestions=(
		"-d"
		"--dry-run"
		"-h"
		"--help"
		"-r"
		"--run"
		"-y"
		"--yes"
	)

	local i
	for i in "${COMP_WORDS[@]}"; do
		array_remove "suggestions" "$i"
	done

	mapfile -t COMPREPLY < <(compgen -W "${suggestions[*]}" -- "${COMP_WORDS[COMP_CWORD]}") && array_remove "COMPREPLY" ""
}

_rsdk_infra-product-update_completions() {
	# shellcheck source=src/lib/rsdk/stdlib.sh
	source "$(dirname "$(command -v "${COMP_WORDS[0]}")")/../lib/rsdk/stdlib.sh"

	local suggestions=(
		"-d"
		"--dry-run"
		"-h"
		"--help"
		"-r"
		"--run"
		"-y"
		"--yes"
	)

	local products=()
	mapfile -t products < <(jq -er '.[].product' "$(dirname "$(command -v "${COMP_WORDS[0]}")")/../share/rsdk/configs/products.json") && array_remove "products" ""
	# Trim empty elements
	array_remove "products" ""
	suggestions+=("${products[@]}")

	local i
	for i in "${COMP_WORDS[@]}"; do
		array_remove "suggestions" "$i"
	done

	mapfile -t COMPREPLY < <(compgen -W "${suggestions[*]}" -- "${COMP_WORDS[COMP_CWORD]}") && array_remove "COMPREPLY" ""
}

_rsdk_infra-repo-update_completions() {
	# shellcheck source=src/lib/rsdk/stdlib.sh
	source "$(dirname "$(command -v "${COMP_WORDS[0]}")")/../lib/rsdk/stdlib.sh"

	local suggestions=(
		"-d"
		"--dry-run"
		"-h"
		"--help"
		"-s"
		"--suffix"
		"-t"
		"--test"
		"-r"
		"--run"
		"-P"
		"--prefix"
		"-y"
		"--yes"
	)

	local distros=()
	mapfile -t distros < <(jq -er '.[].supported_suites[]' "$(dirname "$(command -v "${COMP_WORDS[0]}")")/../share/rsdk/configs/distributions.json") && array_remove "products" ""
	# Trim empty elements
	array_remove "distros" ""
	suggestions+=("${distros[@]}")

	local i
	for i in "${COMP_WORDS[@]}"; do
		array_remove "suggestions" "$i"
	done

	mapfile -t COMPREPLY < <(compgen -W "${suggestions[*]}" -- "${COMP_WORDS[COMP_CWORD]}") && array_remove "COMPREPLY" ""
}

_rsdk_infra-repo-sync_completions() {
	# shellcheck source=src/lib/rsdk/stdlib.sh
	source "$(dirname "$(command -v "${COMP_WORDS[0]}")")/../lib/rsdk/stdlib.sh"

	local suggestions=(
		"-d"
		"--dry-run"
		"-h"
		"--help"
		"-s"
		"--skip-signing"
		"--deb-dir"
		"--origin"
		"--label"
	)

	local distros=()
	mapfile -t distros < <(jq -er '.[].supported_suites[]' "$(dirname "$(command -v "${COMP_WORDS[0]}")")/../share/rsdk/configs/distributions.json") && array_remove "products" ""
	# Trim empty elements
	array_remove "distros" ""
	suggestions+=("${distros[@]}")

	local i
	for i in "${COMP_WORDS[@]}"; do
		array_remove "suggestions" "$i"
	done

	mapfile -t COMPREPLY < <(compgen -W "${suggestions[*]}" -- "${COMP_WORDS[COMP_CWORD]}") && array_remove "COMPREPLY" ""
}

_rsdk_write-image_completions() {
	# shellcheck source=src/lib/rsdk/stdlib.sh
	source "$(dirname "$(command -v "${COMP_WORDS[0]}")")/../lib/rsdk/stdlib.sh"

	case "$COMP_CWORD" in
	2)
		local i suggestions=()
		for i in out/*/output.img \
			"${COMP_WORDS[COMP_CWORD]%/}"/out/*/output.img \
			"${COMP_WORDS[COMP_CWORD]%/}"/*/output.img \
			"${COMP_WORDS[COMP_CWORD]%/}"/output.img; do
			if [[ -f $i ]]; then
				suggestions+=("$i")
			fi
		done
		mapfile -t COMPREPLY < <(compgen -W "${suggestions[*]}" -- "${COMP_WORDS[COMP_CWORD]}") && array_remove "COMPREPLY" ""
		;;
	3)
		local i suggestions=()
		for i in /dev/disk/by-path/*usb*; do
			if [[ $i == *-part* ]]; then
				continue
			fi
			i="$(realpath "$i")"
			if [[ -b $i ]] && grep -q "$(basename "$i")" /proc/partitions; then
				suggestions+=("$i")
			fi
		done
		mapfile -t COMPREPLY < <(compgen -W "${suggestions[*]}" -- "${COMP_WORDS[COMP_CWORD]}") && array_remove "COMPREPLY" ""
		;;
	esac
}

_rsdk_completions() {
	# shellcheck source=src/lib/rsdk/stdlib.sh
	source "$(dirname "$(command -v "${COMP_WORDS[0]}")")/../lib/rsdk/stdlib.sh"

	case "$COMP_CWORD" in
	0) : ;;
	1)
		local subcommands=()
		mapfile -t subcommands < <("$(dirname "$(command -v "${COMP_WORDS[0]}")")/../bin/rsdk" config completions.supported_subcommands) && array_remove "subcommands" ""

		if [[ -f "/.dockerenv" ]]; then
			array_remove "subcommands" "chroot"
			array_remove "subcommands" "devcon"
		fi

		if [[ -n $DEVENV_NIX ]]; then
			array_remove "subcommands" "shell"
		fi

		mapfile -t COMPREPLY < <(compgen -W "${subcommands[*]}" -- "${COMP_WORDS[COMP_CWORD]}") && array_remove "COMPREPLY" ""
		;;
	*)
		if [[ "$(type -t "_rsdk_${COMP_WORDS[1]}_completions")" == "function" ]]; then
			"_rsdk_${COMP_WORDS[1]}_completions"
		fi
		;;
	esac
}

complete -o default -F _rsdk_completions rsdk
