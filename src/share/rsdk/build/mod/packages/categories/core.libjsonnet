local distro_check = import "../../../../configs/distro_check.libjsonnet";
local product_firmware_type = import "../../../../configs/product_firmware_type.libjsonnet";
local suite_backports = import "../../suite_backports.libjsonnet";

function(suite,
         product,
         temp_dir,
         vendor_packages,
         linux_override,
         firmware_override,
) {
    mmdebstrap+: {
        packages+:
        [
            // Core system package
            "init",
            "sudo",
        ] +

        // Firmware
(if distro_check(suite) == "debian"
then
        [
            "firmware-brcm80211",
            "firmware-realtek",
        ]
else if distro_check(suite) == "ubuntu"
then
        [
            "linux-firmware",
        ]
else
        []
) +

        [
            // System utils
            "cloud-initramfs-growroot",
            "ssh",
            "systemd-timesyncd",
        ] +

        [
            // Network
            "bluetooth",
            "iw",
        ] +

(if suite == "bullseye"
then
        [
            "libnm0" % {suite_backports: suite_backports(suite),},
            "network-manager" % {suite_backports: suite_backports(suite),},
            "wpasupplicant" % {suite_backports: suite_backports(suite),},

        ]
else
        [
            "network-manager",
            "wpasupplicant",
        ]
) +

(if suite == "bookworm"
then
        [
            "efibootmgr",
            "systemd-boot",
        ]
else
        []
) +

        [
            // Radxa
            "radxa-firmware",
            "radxa-udev",
            "rsetup-config-first-boot",
        ],

        "essential-hooks"+:
        [
            |||
                set -e

                APT_CONFIG="$MMDEBSTRAP_APT_CONFIG" \
                apt-get install -oDPkg::Chroot-Directory="$1" -y \
                rsetup radxa-bootutils python-is-python3 initramfs-tools

                mkdir -p "$1/boot/efi"
                mount -t tmpfs rsdk "$1/boot/efi"
            |||,
(if suite == "bookworm" && (std.extVar("sdboot") || product_firmware_type(product) == "edk2")
then
            |||
                set -e

                APT_CONFIG="$MMDEBSTRAP_APT_CONFIG" \
                apt-get install -oDPkg::Chroot-Directory="$1" -y \
                systemd-boot
                chroot "$1" sh -c "SYSTEMD_RELAX_ESP_CHECKS=1 bootctl install --esp-path=/boot/efi/ --no-variables --entry-token=literal:RadxaOS"
                sed -i "s/#timeout/timeout/" "$1/boot/efi/loader/loader.conf"
            |||
else
            "echo 'Skip systemd-boot installation.'"
),
            |||
                set -e
                export SYSTEMD_RELAX_ESP_CHECKS=1

                APT_CONFIG="$MMDEBSTRAP_APT_CONFIG" \
                apt-get install -oDPkg::Chroot-Directory="$1" -y \
                %(firmware)s-%(firmware_override)s linux-headers-%(linux_override)s

                APT_CONFIG="$MMDEBSTRAP_APT_CONFIG" \
                apt-get install -oDPkg::Chroot-Directory="$1" -y \
                linux-image-%(linux_override)s

                APT_CONFIG="$MMDEBSTRAP_APT_CONFIG" \
                apt-get install -oDPkg::Chroot-Directory="$1" -y \
                -oDpkg::Options::=--force-confnew %(recommends)s \
                task-%(product)s

                APT_CONFIG="$MMDEBSTRAP_APT_CONFIG" \
                apt-get full-upgrade -oDPkg::Chroot-Directory="$1" -y \
                -oDpkg::Options::=--force-confnew --allow-downgrades
            ||| % {
                recommends: (if distro_check(suite) == "debian" && vendor_packages
                    then
                        "--install-recommends"
                    else
                        "--no-install-recommends"
                ),
                product: product,
                firmware: product_firmware_type(product),
                firmware_override: (if std.length(firmware_override) == 0
                    then
                        product
                    else
                        firmware_override
                ),
                linux_override: (if std.length(linux_override) == 0
                    then
                        product
                    else
                        linux_override
                ),
            },
        ],
    },
}
